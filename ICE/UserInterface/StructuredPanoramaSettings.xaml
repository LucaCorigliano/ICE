<?xml version="1.0" encoding="utf-8"?>
<UserControl x:Class="Microsoft.Research.ICE.UserInterface.StructuredPanoramaSettings" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:converters="clr-namespace:Microsoft.Research.ICE.Converters" xmlns:toolkit="clr-namespace:Microsoft.Research.VisionTools.Toolkit.Desktop;assembly=Microsoft.Research.VisionTools.Toolkit.Desktop" xmlns:userInterface="clr-namespace:Microsoft.Research.ICE.UserInterface">
  <UserControl.Resources>
    <converters:ObjectToBooleanConverter x:Key="objectToBooleanConverter" />
    <converters:NegatedBooleanConverter x:Key="negatedBooleanConverter" />
    <SolidColorBrush x:Key="ImageOrderIcon.Foreground" Color="{StaticResource Color.Foreground.Medium}" />
    <SolidColorBrush x:Key="CornerRadioButton.Normal.Foreground" Color="{StaticResource Color.Foreground.VeryDark}" />
    <SolidColorBrush x:Key="CornerRadioButton.Normal.Background" Color="Transparent" />
    <SolidColorBrush x:Key="CornerRadioButton.Normal.Border" Color="{StaticResource Color.Foreground.VeryDark}" />
    <SolidColorBrush x:Key="CornerRadioButton.MouseOver.Foreground" Color="{StaticResource Color.Foreground.Light}" />
    <SolidColorBrush x:Key="CornerRadioButton.MouseOver.Background" Color="{StaticResource Color.Accent.Medium}" />
    <SolidColorBrush x:Key="CornerRadioButton.MouseOver.Border" Color="{StaticResource Color.Accent.Medium}" />
    <SolidColorBrush x:Key="CornerRadioButton.Pressed.Foreground" Color="{StaticResource Color.Background.Light}" />
    <SolidColorBrush x:Key="CornerRadioButton.Pressed.Background" Color="{StaticResource Color.Accent.Light}" />
    <SolidColorBrush x:Key="CornerRadioButton.Pressed.Border" Color="{StaticResource Color.Accent.Light}" />
    <SolidColorBrush x:Key="CornerRadioButton.Checked.Foreground" Color="{StaticResource Color.Foreground.Light}" />
    <SolidColorBrush x:Key="CornerRadioButton.Checked.Background" Color="Transparent" />
    <SolidColorBrush x:Key="CornerRadioButton.Checked.Border" Color="{StaticResource Color.Foreground.Light}" />
    <SolidColorBrush x:Key="CornerRadioButton.Disabled.Foreground" Color="{StaticResource Color.Foreground.VeryDark}" />
    <SolidColorBrush x:Key="CornerRadioButton.Disabled.Background" Color="Transparent" />
    <SolidColorBrush x:Key="CornerRadioButton.Disabled.Border" Color="{StaticResource Color.Foreground.VeryDark}" />
    <Style x:Key="cornerRadioButtonStyle" TargetType="{x:Type RadioButton}">
      <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource FocusVisualStyle.Outer.Light}" />
      <Setter Property="Control.Foreground" Value="{DynamicResource CornerRadioButton.Normal.Foreground}" />
      <Setter Property="Control.Background" Value="{DynamicResource CornerRadioButton.Normal.Background}" />
      <Setter Property="Control.BorderBrush" Value="{DynamicResource CornerRadioButton.Normal.Border}" />
      <Setter Property="Control.BorderThickness" Value="1" />
      <Setter Property="FrameworkElement.Width" Value="20" />
      <Setter Property="FrameworkElement.Height" Value="20" />
      <Setter Property="FrameworkElement.Margin" Value="0,0,2,4" />
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type RadioButton}">
            <Border Name="innerBorder" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}">
              <TextBlock Name="number" Text="1" TextBlock.Foreground="{TemplateBinding Control.Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" />
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter TargetName="number" Property="UIElement.Visibility" Value="Visible" />
                <Setter Value="{DynamicResource CornerRadioButton.MouseOver.Foreground}" Property="Control.Foreground" />
                <Setter Value="{DynamicResource CornerRadioButton.MouseOver.Background}" Property="Control.Background" />
                <Setter Value="{DynamicResource CornerRadioButton.MouseOver.Border}" Property="Control.BorderBrush" />
              </Trigger>
              <Trigger Property="ButtonBase.IsPressed" Value="True">
                <Setter TargetName="number" Property="UIElement.Visibility" Value="Visible" />
                <Setter Value="{DynamicResource CornerRadioButton.Pressed.Foreground}" Property="Control.Foreground" />
                <Setter Value="{DynamicResource CornerRadioButton.Pressed.Background}" Property="Control.Background" />
                <Setter Value="{DynamicResource CornerRadioButton.Pressed.Border}" Property="Control.BorderBrush" />
              </Trigger>
              <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter TargetName="number" Property="UIElement.Visibility" Value="Visible" />
                <Setter Value="{DynamicResource CornerRadioButton.Checked.Foreground}" Property="Control.Foreground" />
                <Setter Value="{DynamicResource CornerRadioButton.Checked.Background}" Property="Control.Background" />
                <Setter Value="{DynamicResource CornerRadioButton.Checked.Border}" Property="Control.BorderBrush" />
              </Trigger>
              <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter TargetName="number" Property="UIElement.Visibility" Value="Collapsed" />
                <Setter Value="{DynamicResource CornerRadioButton.Disabled.Foreground}" Property="Control.Foreground" />
                <Setter Value="{DynamicResource CornerRadioButton.Disabled.Background}" Property="Control.Background" />
                <Setter Value="{DynamicResource CornerRadioButton.Disabled.Border}" Property="Control.BorderBrush" />
              </Trigger>
              <Trigger Property="RadioButton.GroupName" Value="TopLeft">
                <Setter TargetName="innerBorder" Property="Border.CornerRadius" Value="8,0,0,0" />
              </Trigger>
              <Trigger Property="RadioButton.GroupName" Value="TopRight">
                <Setter TargetName="innerBorder" Property="Border.CornerRadius" Value="0,8,0,0" />
              </Trigger>
              <Trigger Property="RadioButton.GroupName" Value="BottomRight">
                <Setter TargetName="innerBorder" Property="Border.CornerRadius" Value="0,0,8,0" />
              </Trigger>
              <Trigger Property="RadioButton.GroupName" Value="BottomLeft">
                <Setter TargetName="innerBorder" Property="Border.CornerRadius" Value="0,0,0,8" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="boxBorder" TargetType="{x:Type Border}">
      <Setter Property="Border.Background" Value="{DynamicResource CornerRadioButton.Normal.Background}" />
      <Setter Property="Border.BorderBrush" Value="{DynamicResource CornerRadioButton.Normal.Border}" />
      <Setter Property="Border.BorderThickness" Value="1" />
      <Setter Property="FrameworkElement.Width" Value="20" />
      <Setter Property="FrameworkElement.Height" Value="20" />
      <Setter Property="FrameworkElement.Margin" Value="0,0,2,4" />
    </Style>
    <SolidColorBrush x:Key="DirectionRadioButton.Normal.Foreground" Color="{StaticResource Color.Foreground.VeryDark}" />
    <SolidColorBrush x:Key="DirectionRadioButton.Normal.Background" Color="Transparent" />
    <SolidColorBrush x:Key="DirectionRadioButton.Normal.Border" Color="{StaticResource Color.Foreground.VeryDark}" />
    <SolidColorBrush x:Key="DirectionRadioButton.MouseOver.Foreground" Color="{StaticResource Color.Foreground.Light}" />
    <SolidColorBrush x:Key="DirectionRadioButton.MouseOver.Background" Color="{StaticResource Color.Accent.Medium}" />
    <SolidColorBrush x:Key="DirectionRadioButton.MouseOver.Border" Color="{StaticResource Color.Accent.Medium}" />
    <SolidColorBrush x:Key="DirectionRadioButton.Pressed.Foreground" Color="{StaticResource Color.Background.Light}" />
    <SolidColorBrush x:Key="DirectionRadioButton.Pressed.Background" Color="{StaticResource Color.Accent.Light}" />
    <SolidColorBrush x:Key="DirectionRadioButton.Pressed.Border" Color="{StaticResource Color.Accent.Light}" />
    <SolidColorBrush x:Key="DirectionRadioButton.Checked.Foreground" Color="{StaticResource Color.Foreground.Light}" />
    <SolidColorBrush x:Key="DirectionRadioButton.Checked.Background" Color="Transparent" />
    <SolidColorBrush x:Key="DirectionRadioButton.Checked.Border" Color="{StaticResource Color.Foreground.Light}" />
    <SolidColorBrush x:Key="DirectionRadioButton.Disabled.Foreground" Color="{StaticResource Color.Foreground.VeryDark}" />
    <SolidColorBrush x:Key="DirectionRadioButton.Disabled.Background" Color="Transparent" />
    <SolidColorBrush x:Key="DirectionRadioButton.Disabled.Border" Color="{StaticResource Color.Foreground.VeryDark}" />
    <SolidColorBrush x:Key="DirectionRadioButton.Arrow.Stroke" Color="{StaticResource Color.Background.VeryDark}" />
    <SolidColorBrush x:Key="DirectionRadioButton.Arrow.Fill" Color="{StaticResource Color.Accent.Light}" />
    <Style x:Key="directionRadioButtonStyle" TargetType="{x:Type RadioButton}">
      <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource FocusVisualStyle.Outer.Light}" />
      <Setter Property="Control.Foreground" Value="{DynamicResource DirectionRadioButton.Normal.Foreground}" />
      <Setter Property="Control.Background" Value="{DynamicResource DirectionRadioButton.Normal.Background}" />
      <Setter Property="Control.BorderBrush" Value="{DynamicResource DirectionRadioButton.Normal.Border}" />
      <Setter Property="Control.BorderThickness" Value="1" />
      <Setter Property="Panel.ZIndex" Value="1" />
      <Setter Property="FrameworkElement.Width" Value="20" />
      <Setter Property="FrameworkElement.Height" Value="20" />
      <Setter Property="FrameworkElement.Margin" Value="0,0,2,4" />
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type RadioButton}">
            <Border Name="innerBorder" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}">
              <Grid>
                <TextBlock Name="number" Text="2" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" />
                <Polygon Name="arrow" Fill="{DynamicResource DirectionRadioButton.Arrow.Fill}" Stroke="{DynamicResource DirectionRadioButton.Arrow.Stroke}" StrokeThickness="1" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" />
              </Grid>
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter TargetName="number" Property="UIElement.Visibility" Value="Visible" />
                <Setter Value="{DynamicResource DirectionRadioButton.MouseOver.Foreground}" Property="Control.Foreground" />
                <Setter Value="{DynamicResource DirectionRadioButton.MouseOver.Background}" Property="Control.Background" />
                <Setter Value="{DynamicResource DirectionRadioButton.MouseOver.Border}" Property="Control.BorderBrush" />
              </Trigger>
              <Trigger Property="ButtonBase.IsPressed" Value="True">
                <Setter TargetName="number" Property="UIElement.Visibility" Value="Visible" />
                <Setter Value="{DynamicResource DirectionRadioButton.Pressed.Foreground}" Property="Control.Foreground" />
                <Setter Value="{DynamicResource DirectionRadioButton.Pressed.Background}" Property="Control.Background" />
                <Setter Value="{DynamicResource DirectionRadioButton.Pressed.Border}" Property="Control.BorderBrush" />
              </Trigger>
              <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter TargetName="number" Property="UIElement.Visibility" Value="Visible" />
                <Setter TargetName="arrow" Property="UIElement.Visibility" Value="Visible" />
                <Setter Value="{DynamicResource DirectionRadioButton.Checked.Foreground}" Property="Control.Foreground" />
                <Setter Value="{DynamicResource DirectionRadioButton.Checked.Background}" Property="Control.Background" />
                <Setter Value="{DynamicResource DirectionRadioButton.Checked.Border}" Property="Control.BorderBrush" />
              </Trigger>
              <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter TargetName="number" Property="UIElement.Visibility" Value="Collapsed" />
                <Setter TargetName="arrow" Property="UIElement.Visibility" Value="Collapsed" />
                <Setter Value="{DynamicResource DirectionRadioButton.Disabled.Foreground}" Property="Control.Foreground" />
                <Setter Value="{DynamicResource DirectionRadioButton.Disabled.Background}" Property="Control.Background" />
                <Setter Value="{DynamicResource DirectionRadioButton.Disabled.Border}" Property="Control.BorderBrush" />
              </Trigger>
              <Trigger Property="FrameworkElement.Tag" Value="Right">
                <Setter TargetName="arrow" Property="Polygon.Points" Value="0,4 5,4 5,0 13,8 5,16 5,12 0,12" />
                <Setter TargetName="arrow" Property="FrameworkElement.HorizontalAlignment" Value="Left" />
                <Setter TargetName="arrow" Property="FrameworkElement.Margin" Value="-9,1,0,0" />
              </Trigger>
              <Trigger Property="FrameworkElement.Tag" Value="Left">
                <Setter TargetName="arrow" Property="Polygon.Points" Value="13,4 8,4 8,0 0,8 8,16 8,12 13,12" />
                <Setter TargetName="arrow" Property="FrameworkElement.HorizontalAlignment" Value="Right" />
                <Setter TargetName="arrow" Property="FrameworkElement.Margin" Value="0,1,-9,0" />
              </Trigger>
              <Trigger Property="FrameworkElement.Tag" Value="Down">
                <Setter TargetName="arrow" Property="Polygon.Points" Value="4,0 4,5 0,5 8,13 16,5 12,5 12,0" />
                <Setter TargetName="arrow" Property="FrameworkElement.VerticalAlignment" Value="Top" />
                <Setter TargetName="arrow" Property="FrameworkElement.Margin" Value="1,-9,0,0" />
              </Trigger>
              <Trigger Property="FrameworkElement.Tag" Value="Up">
                <Setter TargetName="arrow" Property="Polygon.Points" Value="4,13 4,8 0,8 8,0 16,8 12,8 12,13" />
                <Setter TargetName="arrow" Property="FrameworkElement.VerticalAlignment" Value="Bottom" />
                <Setter TargetName="arrow" Property="FrameworkElement.Margin" Value="1,0,0,-10" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
  </UserControl.Resources>
  <StackPanel>
    <userInterface:CameraMotionSettings />
    <GroupBox Header="Layout" Margin="0,10,0,0" DataContext="{Binding StructuredImport}">
      <StackPanel>
        <StackPanel Orientation="Horizontal">
          <Button Content="Auto layout" ToolTip="Reset to automatically estimated values" HorizontalAlignment="Left" Click="AutoLayoutButton_Click" />
          <Label Margin="20,0,0,0" VerticalAlignment="Center" Content="{Binding ImageCount, FallbackValue=17}" />
          <Label Content=" images" VerticalAlignment="Center" />
        </StackPanel>
        <Label Content="Initial corner and direction" Margin="0,10,0,0" Target="{Binding ElementName=startingCornerGrid}" />
        <Grid HorizontalAlignment="Left" SnapsToDevicePixels="True" Margin="0,5,0,0">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
          </Grid.RowDefinitions>
          <UniformGrid Name="startingCornerGrid" Columns="4" Grid.Column="0" Grid.Row="0" KeyboardNavigation.TabNavigation="Local">
            <RadioButton Style="{StaticResource cornerRadioButtonStyle}" TabIndex="1" GroupName="TopLeft" ToolTip="Start in top left corner" IsChecked="{Binding StartingCorner, ConverterParameter=TopLeft, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" />
            <RadioButton Style="{StaticResource directionRadioButtonStyle}" TabIndex="2" Tag="Right" GroupName="PrimaryDirection1" ToolTip="Start moving right" HorizontalContentAlignment="Left" IsChecked="{Binding PrimaryDirection, ConverterParameter=Horizontal, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" IsEnabled="{Binding StartingCorner, ConverterParameter=TopLeft, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" />
            <RadioButton Style="{StaticResource directionRadioButtonStyle}" TabIndex="3" Tag="Left" GroupName="PrimaryDirection2" ToolTip="Start moving left" HorizontalContentAlignment="Right" IsChecked="{Binding PrimaryDirection, ConverterParameter=Horizontal, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" IsEnabled="{Binding StartingCorner, ConverterParameter=TopRight, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" />
            <RadioButton Style="{StaticResource cornerRadioButtonStyle}" TabIndex="4" GroupName="TopRight" ToolTip="Start in top right corner" IsChecked="{Binding StartingCorner, ConverterParameter=TopRight, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" />
            <RadioButton Style="{StaticResource directionRadioButtonStyle}" TabIndex="5" Tag="Down" GroupName="PrimaryDirection3" ToolTip="Start moving down" VerticalContentAlignment="Top" IsChecked="{Binding PrimaryDirection, ConverterParameter=Vertical, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" IsEnabled="{Binding StartingCorner, ConverterParameter=TopLeft, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" />
            <Border Style="{StaticResource boxBorder}" />
            <Border Style="{StaticResource boxBorder}" />
            <RadioButton Style="{StaticResource directionRadioButtonStyle}" TabIndex="6" Tag="Down" GroupName="PrimaryDirection4" ToolTip="Start moving down" VerticalContentAlignment="Top" IsChecked="{Binding PrimaryDirection, ConverterParameter=Vertical, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" IsEnabled="{Binding StartingCorner, ConverterParameter=TopRight, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" />
            <RadioButton Style="{StaticResource directionRadioButtonStyle}" TabIndex="7" Tag="Up" GroupName="PrimaryDirection5" ToolTip="Start moving up" VerticalContentAlignment="Bottom" IsChecked="{Binding PrimaryDirection, ConverterParameter=Vertical, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" IsEnabled="{Binding StartingCorner, ConverterParameter=BottomLeft, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" />
            <Border Style="{StaticResource boxBorder}" />
            <Border Style="{StaticResource boxBorder}" />
            <RadioButton Style="{StaticResource directionRadioButtonStyle}" TabIndex="8" Tag="Up" GroupName="PrimaryDirection6" ToolTip="Start moving up" VerticalContentAlignment="Bottom" IsChecked="{Binding PrimaryDirection, ConverterParameter=Vertical, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" IsEnabled="{Binding StartingCorner, ConverterParameter=BottomRight, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" />
            <RadioButton Style="{StaticResource cornerRadioButtonStyle}" TabIndex="9" GroupName="BottomLeft" ToolTip="Start in bottom left corner" IsChecked="{Binding StartingCorner, ConverterParameter=BottomLeft, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" />
            <RadioButton Style="{StaticResource directionRadioButtonStyle}" TabIndex="10" Tag="Right" GroupName="PrimaryDirection7" ToolTip="Start moving right" HorizontalContentAlignment="Left" IsChecked="{Binding PrimaryDirection, ConverterParameter=Horizontal, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" IsEnabled="{Binding StartingCorner, ConverterParameter=BottomLeft, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" />
            <RadioButton Style="{StaticResource directionRadioButtonStyle}" TabIndex="11" Tag="Left" GroupName="PrimaryDirection8" ToolTip="Start moving left" HorizontalContentAlignment="Right" IsChecked="{Binding PrimaryDirection, ConverterParameter=Horizontal, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" IsEnabled="{Binding StartingCorner, ConverterParameter=BottomRight, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" />
            <RadioButton Style="{StaticResource cornerRadioButtonStyle}" TabIndex="12" GroupName="BottomRight" ToolTip="Start in bottom right corner" IsChecked="{Binding StartingCorner, ConverterParameter=BottomRight, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" />
          </UniformGrid>
          <Grid Grid.Column="1">
            <Rectangle Width="21" Height="1" Fill="#FF808080" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,2,0,0" />
                        <Polygon Fill="#FF808080" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="7,4,0,0" Points="3.5,7.5 0,11 3.5,0 7,11" />
            <Rectangle Width="1" Fill="#FF808080" HorizontalAlignment="Left" Margin="10,5,0,5" />
                        <Polygon Fill="#FF808080" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="7,0,0,4" Points="3.5,3.5 0,0 3.5,11 7,0" />
            <Rectangle Width="21" Height="1" Fill="#FF808080" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="0,0,0,2" />
            <StackPanel VerticalAlignment="Top" Margin="20,33,0,0" Orientation="Horizontal">
              <StackPanel.Style>
                <Style TargetType="{x:Type StackPanel}">
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding PrimaryDirection}" Value="Vertical">
                      <Setter Property="UIElement.Visibility" Value="Hidden" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </StackPanel.Style>
              <Label Content="Rows:" />
              <Label Margin="5,0,0,0" Content="{Binding SecondaryDirectionImageCount, FallbackValue=3}" />
            </StackPanel>
            <StackPanel VerticalAlignment="Top" Margin="20,30,0,0">
              <StackPanel.Style>
                <Style TargetType="{x:Type StackPanel}">
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding PrimaryDirection, FallbackValue=Horizontal}" Value="Horizontal">
                      <Setter Property="UIElement.Visibility" Value="Hidden" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </StackPanel.Style>
              <StackPanel Orientation="Horizontal">
                <Label Content="Rows:" Padding="0" VerticalAlignment="Center" Target="{Binding ElementName=rowCountTextBox}" />
                <toolkit:TextBoxPlus Name="rowCountTextBox" FrameworkElement.Width="40" FrameworkElement.VerticalAlignment="Center" FrameworkElement.Margin="5,0,0,0" TextBox.Text="{Binding PrimaryDirectionImageCount, FallbackValue=6}" />
              </StackPanel>
              <Slider Width="100" Minimum="1" IsSnapToTickEnabled="True" TickFrequency="1" SmallChange="1" LargeChange="5" VerticalAlignment="Center" Margin="0,5,0,0" Maximum="{Binding ImageCount, FallbackValue=17}" Value="{Binding PrimaryDirectionImageCount, FallbackValue=6}" />
            </StackPanel>
          </Grid>
          <Grid Grid.Column="0" Grid.Row="1">
            <Rectangle Width="1" Height="21" Fill="#FF808080" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="2,0,0,0" />
                        <Polygon Fill="#FF808080" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="4,7,0,0" Points="7.5,3.5 11,0 0,3.5 11,7" />
            <Rectangle Height="1" Fill="#FF808080" VerticalAlignment="Top" Margin="5,10,5,0" />
                        <Polygon Fill="#FF808080" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,7,4,0" Points="3.5,3.5 0,0 11,3.5 0,7" />
            <Rectangle Width="1" Height="21" Fill="#FF808080" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,0,2,0" />
          </Grid>
          <StackPanel Orientation="Horizontal" Grid.Column="0" Grid.Row="2" Grid.ColumnSpan="2" HorizontalAlignment="Left" Margin="23,5,0,0">
            <StackPanel.Style>
              <Style TargetType="{x:Type StackPanel}">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding PrimaryDirection, FallbackValue=Horizontal}" Value="Horizontal">
                    <Setter Property="UIElement.Visibility" Value="Hidden" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </StackPanel.Style>
            <Label Content="Columns:" VerticalAlignment="Center" />
            <Label VerticalAlignment="Center" Margin="5,0,0,0" Content="{Binding SecondaryDirectionImageCount, FallbackValue=3}" />
          </StackPanel>
          <StackPanel Orientation="Horizontal" Grid.Column="0" Grid.Row="2" Grid.ColumnSpan="2" HorizontalAlignment="Left" Margin="23,5,0,0">
            <StackPanel.Style>
              <Style TargetType="{x:Type StackPanel}">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding PrimaryDirection, FallbackValue=Horizontal}" Value="Vertical">
                    <Setter Property="UIElement.Visibility" Value="Hidden" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </StackPanel.Style>
            <Label Content="Columns:" HorizontalAlignment="Center" Padding="0" VerticalAlignment="Center" Target="{Binding ElementName=primaryDirectionImageCountTextBox}" />
            <toolkit:TextBoxPlus Name="primaryDirectionImageCountTextBox" FrameworkElement.Width="40" FrameworkElement.VerticalAlignment="Center" FrameworkElement.Margin="5,0,0,0" TextBox.Text="{Binding PrimaryDirectionImageCount, FallbackValue=6}" />
            <Slider Width="100" Minimum="1" IsSnapToTickEnabled="True" TickFrequency="1" SmallChange="1" LargeChange="5" VerticalAlignment="Center" Margin="5,0,0,0" Maximum="{Binding ImageCount, FallbackValue=17}" Value="{Binding PrimaryDirectionImageCount, FallbackValue=6}" />
          </StackPanel>
        </Grid>
        <StackPanel Orientation="Horizontal" Margin="0,15,0,0">
          <StackPanel>
            <StackPanel.Style>
              <Style TargetType="{x:Type StackPanel}">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding SecondaryDirectionImageCount, FallbackValue=3}" Value="1">
                    <Setter Property="UIElement.IsEnabled" Value="False" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </StackPanel.Style>
            <Label Content="Image order" />
            <RadioButton Name="serpentineRadioButton" GroupName="MovementMethod1" HorizontalAlignment="Left" VerticalContentAlignment="Center" Margin="0,3,0,0" IsChecked="{Binding MovementMethod, ConverterParameter=Serpentine, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}">
              <StackPanel Orientation="Horizontal" Margin="2">
                <Canvas Width="14" Height="14">
                  <Path Stroke="{StaticResource ImageOrderIcon.Foreground}" StrokeThickness="1" Data="M15,2C16,3,16,5,15,6 M-1,8C-2,9,-2,11,-1,12" />
                  <Path Stroke="{StaticResource ImageOrderIcon.Foreground}" StrokeThickness="2" Data="M0,1L12,1 M2,7L14,7 M0,13L12,13" />
                  <Polygon Fill="{StaticResource ImageOrderIcon.Foreground}" Points="10,10 15,13 10,16" />
                  <Polygon Fill="{StaticResource ImageOrderIcon.Foreground}" Points="4,4 -1,7 4,10" />
                  <Polygon Fill="{StaticResource ImageOrderIcon.Foreground}" Points="10,-2 15,1 10,4" />
                </Canvas>
                <Label Content="Serpentine" Padding="5,0,0,0" Target="{Binding ElementName=serpentineRadioButton}" />
              </StackPanel>
            </RadioButton>
            <RadioButton Name="zigZagRadioButton" GroupName="MovementMethod2" HorizontalAlignment="Left" VerticalContentAlignment="Center" Margin="0,3,0,0" IsChecked="{Binding MovementMethod, ConverterParameter=Zigzag, Converter={StaticResource objectToBooleanConverter}}">
              <StackPanel Orientation="Horizontal" Margin="2">
                <Canvas Width="14" Height="14">
                  <Path Stroke="{StaticResource ImageOrderIcon.Foreground}" StrokeThickness="1" Data="M9,3.5L3,4.5 M9,9.5L3,10.5" />
                  <Path Stroke="{StaticResource ImageOrderIcon.Foreground}" StrokeThickness="2" Data="M0,1L12,1 M0,7L12,7 M0,13L12,13" />
                  <Polygon Fill="{StaticResource ImageOrderIcon.Foreground}" Points="10,10 15,13 10,16" />
                  <Polygon Fill="{StaticResource ImageOrderIcon.Foreground}" Points="10,4 15,7 10,10" />
                  <Polygon Fill="{StaticResource ImageOrderIcon.Foreground}" Points="10,-2 15,1 10,4" />
                </Canvas>
                <Label Content="Zigzag" Padding="5,0,0,0" Target="{Binding ElementName=zigZagRadioButton}" />
              </StackPanel>
            </RadioButton>
          </StackPanel>
          <StackPanel Margin="30,0,0,0">
            <Label Content="Angular range" />
            <RadioButton Name="non360RadioButton" Content="Less than 360°" Margin="0,3,0,0" IsChecked="{Binding AngularRange, ConverterParameter=Non360, Converter={StaticResource objectToBooleanConverter}, FallbackValue=True}" />
            <RadioButton Content="360° horizontally" Margin="0,3,0,0" IsChecked="{Binding AngularRange, ConverterParameter=Horizontal360, Converter={StaticResource objectToBooleanConverter}}" />
            <RadioButton Content="360° vertically" Margin="0,3,0,0" IsChecked="{Binding AngularRange, ConverterParameter=Vertical360, Converter={StaticResource objectToBooleanConverter}}" />
          </StackPanel>
        </StackPanel>
      </StackPanel>
    </GroupBox>
    <GroupBox Header="Overlap" Margin="0,10,0,0" DataContext="{Binding StructuredImport}">
      <Grid Grid.IsSharedSizeScope="True">
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" />
          <RowDefinition Height="10" />
          <RowDefinition Height="Auto" />
          <RowDefinition Height="5" />
          <RowDefinition Height="Auto" />
          <RowDefinition Height="5" />
          <RowDefinition Height="Auto" />
          <RowDefinition Height="5" />
          <RowDefinition Height="Auto" />
          <RowDefinition Height="10" />
          <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Button Content="Auto overlap" ToolTip="Reset to automatically estimated values" HorizontalAlignment="Left" Click="AutoOverlapButton_Click" />
        <Grid Grid.Row="2" IsEnabled="{Binding HasMultipleColumns}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition SharedSizeGroup="labelColumn" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="40" />
            <ColumnDefinition Width="2" />
            <ColumnDefinition SharedSizeGroup="unitColumn" />
          </Grid.ColumnDefinitions>
          <Label Content="Horizontal" VerticalAlignment="Center" Target="{Binding ElementName=horizontalOverlapTextBox}" />
          <Slider IsSnapToTickEnabled="True" TickFrequency="1" SmallChange="5" LargeChange="10" VerticalAlignment="Center" Grid.Column="2" Minimum="{Binding MinOverlap, FallbackValue=1}" Maximum="{Binding MaxOverlap, FallbackValue=99}" Value="{Binding HorizontalOverlap, FallbackValue=25}" />
          <toolkit:TextBoxPlus Name="horizontalOverlapTextBox" Control.HorizontalContentAlignment="Right" FrameworkElement.VerticalAlignment="Center" Grid.Column="4" TextBox.Text="{Binding HorizontalOverlap, FallbackValue=25}" />
          <Label Content="%" VerticalAlignment="Center" Grid.Column="6" />
        </Grid>
        <Grid Grid.Row="4" IsEnabled="{Binding HasMultipleRows}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition SharedSizeGroup="labelColumn" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="40" />
            <ColumnDefinition Width="2" />
            <ColumnDefinition SharedSizeGroup="unitColumn" />
          </Grid.ColumnDefinitions>
          <Label Content="Vertical" VerticalAlignment="Center" Target="{Binding ElementName=verticalOverlapTextBox}" />
          <Slider IsSnapToTickEnabled="True" TickFrequency="1" SmallChange="5" LargeChange="10" VerticalAlignment="Center" Grid.Column="2" Minimum="{Binding MinOverlap, FallbackValue=1}" Maximum="{Binding MaxOverlap, FallbackValue=99}" Value="{Binding VerticalOverlap, FallbackValue=25}" />
          <toolkit:TextBoxPlus Name="verticalOverlapTextBox" Control.HorizontalContentAlignment="Right" FrameworkElement.VerticalAlignment="Center" Grid.Column="4" TextBox.Text="{Binding VerticalOverlap, FallbackValue=25}" />
          <Label Content="%" VerticalAlignment="Center" Grid.Column="6" />
        </Grid>
        <Grid Grid.Row="6" IsEnabled="{Binding ElementName=non360RadioButton, Path=IsChecked, Converter={StaticResource negatedBooleanConverter}}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition SharedSizeGroup="labelColumn" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="40" />
            <ColumnDefinition Width="2" />
            <ColumnDefinition SharedSizeGroup="unitColumn" />
          </Grid.ColumnDefinitions>
          <Label Content="360° seam" VerticalAlignment="Center" Target="{Binding ElementName=seamOverlapTextBox}" />
          <Slider IsSnapToTickEnabled="True" TickFrequency="1" SmallChange="5" LargeChange="10" VerticalAlignment="Center" Grid.Column="2" Minimum="{Binding MinOverlap, FallbackValue=1}" Maximum="{Binding MaxOverlap, FallbackValue=99}" Value="{Binding SeamOverlap, FallbackValue=25}" />
          <toolkit:TextBoxPlus Name="seamOverlapTextBox" Control.HorizontalContentAlignment="Right" FrameworkElement.VerticalAlignment="Center" Grid.Column="4" TextBox.Text="{Binding SeamOverlap, FallbackValue=25}" />
          <Label Content="%" VerticalAlignment="Center" Grid.Column="6" />
        </Grid>
        <Grid Grid.Row="8">
          <Grid.ColumnDefinitions>
            <ColumnDefinition SharedSizeGroup="labelColumn" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="40" />
            <ColumnDefinition Width="2" />
            <ColumnDefinition SharedSizeGroup="unitColumn" />
          </Grid.ColumnDefinitions>
          <Label Content="Search radius" VerticalAlignment="Center" Target="{Binding ElementName=searchRadiusTextBox}" />
          <Slider Minimum="0" Maximum="100" IsSnapToTickEnabled="True" TickFrequency="1" SmallChange="5" LargeChange="10" VerticalAlignment="Center" Grid.Column="2" Value="{Binding FeatureMatchingSearchRadius, FallbackValue=10}" />
          <toolkit:TextBoxPlus Name="searchRadiusTextBox" Control.HorizontalContentAlignment="Right" FrameworkElement.VerticalAlignment="Center" Grid.Column="4" TextBox.Text="{Binding FeatureMatchingSearchRadius, FallbackValue=10}" />
          <Label Content="%" VerticalAlignment="Center" Grid.Column="6" />
        </Grid>
        <CheckBox Content="Preview overlap" HorizontalAlignment="Left" Grid.Row="10" IsChecked="{Binding PreviewOverlap}" />
      </Grid>
    </GroupBox>
  </StackPanel>
</UserControl>